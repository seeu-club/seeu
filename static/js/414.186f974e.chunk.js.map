{"version":3,"file":"static/js/414.186f974e.chunk.js","mappings":"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","sources":["../node_modules/quill-image-uploader/src/blots/image.js","../node_modules/quill-image-uploader/src/quill.imageUploader.js"],"sourcesContent":["import Quill from \"quill\";\r\n\r\nconst InlineBlot = Quill.import(\"blots/block\");\r\n\r\nclass LoadingImage extends InlineBlot {\r\n    static create(src) {\r\n        const node = super.create(src);\r\n        if (src === true) return node;\r\n\r\n        const image = document.createElement(\"img\");\r\n        image.setAttribute(\"src\", src);\r\n        node.appendChild(image);\r\n        return node;\r\n    }\r\n    deleteAt(index, length) {\r\n        super.deleteAt(index, length);\r\n        this.cache = {};\r\n    }\r\n    static value(domNode) {\r\n        const { src, custom } = domNode.dataset;\r\n        return { src, custom };\r\n    }\r\n}\r\n\r\nLoadingImage.blotName = \"imageBlot\";\r\nLoadingImage.className = \"image-uploading\";\r\nLoadingImage.tagName = \"span\";\r\nQuill.register({ \"formats/imageBlot\": LoadingImage });\r\n\r\nexport default LoadingImage;","import LoadingImage from \"./blots/image.js\";\r\n\r\nclass ImageUploader {\r\n    constructor(quill, options) {\r\n        this.quill = quill;\r\n        this.options = options;\r\n        this.range = null;             \r\n        this.placeholderDelta = null; \r\n\r\n        if (typeof this.options.upload !== \"function\")\r\n            console.warn(\r\n                \"[Missing config] upload function that returns a promise is required\"\r\n            );\r\n\r\n        var toolbar = this.quill.getModule(\"toolbar\");\r\n        if (toolbar) {\r\n            toolbar.addHandler(\"image\", this.selectLocalImage.bind(this));\r\n        }\r\n\r\n        this.handleDrop = this.handleDrop.bind(this);\r\n        this.handlePaste = this.handlePaste.bind(this);\r\n\r\n        this.quill.root.addEventListener(\"drop\", this.handleDrop, false);\r\n        this.quill.root.addEventListener(\"paste\", this.handlePaste, false);\r\n    }\r\n\r\n    selectLocalImage() {\r\n        this.quill.focus();\r\n        this.range = this.quill.getSelection();\r\n        this.fileHolder = document.createElement(\"input\");\r\n        this.fileHolder.setAttribute(\"type\", \"file\");\r\n        this.fileHolder.setAttribute(\"accept\", \"image/*\");\r\n        this.fileHolder.setAttribute(\"style\", \"visibility:hidden\");\r\n\r\n        this.fileHolder.onchange = this.fileChanged.bind(this);\r\n\r\n        document.body.appendChild(this.fileHolder);\r\n\r\n        this.fileHolder.click();\r\n\r\n        window.requestAnimationFrame(() => {\r\n            document.body.removeChild(this.fileHolder);\r\n        });\r\n    }\r\n\r\n    handleDrop(evt) {\r\n        if (\r\n            evt.dataTransfer &&\r\n            evt.dataTransfer.files &&\r\n            evt.dataTransfer.files.length\r\n        ) {\r\n            evt.stopPropagation();\r\n            evt.preventDefault();\r\n            if (document.caretRangeFromPoint) {\r\n                const selection = document.getSelection();\r\n                const range = document.caretRangeFromPoint(evt.clientX, evt.clientY);\r\n                if (selection && range) {\r\n                    selection.setBaseAndExtent(\r\n                        range.startContainer,\r\n                        range.startOffset,\r\n                        range.startContainer,\r\n                        range.startOffset\r\n                    );\r\n                }\r\n            } else {\r\n                const selection = document.getSelection();\r\n                const range = document.caretPositionFromPoint(evt.clientX, evt.clientY);\r\n                if (selection && range) {\r\n                    selection.setBaseAndExtent(\r\n                        range.offsetNode,\r\n                        range.offset,\r\n                        range.offsetNode,\r\n                        range.offset\r\n                    );\r\n                }\r\n            }\r\n\r\n            this.quill.focus();\r\n            this.range = this.quill.getSelection();\r\n            let file = evt.dataTransfer.files[0];\r\n\r\n            setTimeout(() => {\r\n                this.quill.focus();\r\n                this.range = this.quill.getSelection();\r\n                this.readAndUploadFile(file);\r\n            }, 0);\r\n        }\r\n    }\r\n\r\n    handlePaste(evt) {\r\n        let clipboard = evt.clipboardData || window.clipboardData;\r\n\r\n        // IE 11 is .files other browsers are .items\r\n        if (clipboard && (clipboard.items || clipboard.files)) {\r\n            let items = clipboard.items || clipboard.files;\r\n            const IMAGE_MIME_REGEX = /^image\\/(jpe?g|gif|png|svg|webp)$/i;\r\n\r\n            for (let i = 0; i < items.length; i++) {\r\n                if (IMAGE_MIME_REGEX.test(items[i].type)) {\r\n                    let file = items[i].getAsFile ? items[i].getAsFile() : items[i];\r\n\r\n                    if (file) {\r\n                        this.quill.focus();\r\n                        this.range = this.quill.getSelection();\r\n                        evt.preventDefault();\r\n                        setTimeout(() => {\r\n                            this.quill.focus();\r\n                            this.range = this.quill.getSelection();\r\n                            this.readAndUploadFile(file);\r\n                        }, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    readAndUploadFile(file) {\r\n        let isUploadReject = false;\r\n\r\n        const fileReader = new FileReader();\r\n\r\n        fileReader.addEventListener(\r\n            \"load\",\r\n            () => {\r\n                if (!isUploadReject) {\r\n                    let base64ImageSrc = fileReader.result;\r\n                    this.insertBase64Image(base64ImageSrc);\r\n                }\r\n            },\r\n            false\r\n        );\r\n\r\n        if (file) {\r\n            fileReader.readAsDataURL(file);\r\n        }\r\n\r\n        this.options.upload(file).then(\r\n            (imageUrl) => {\r\n                this.insertToEditor(imageUrl);\r\n            },\r\n            (error) => {\r\n                isUploadReject = true;\r\n                this.removeBase64Image();\r\n                console.warn(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    fileChanged() {\r\n        const file = this.fileHolder.files[0];\r\n        this.readAndUploadFile(file);\r\n    }\r\n\r\n    insertBase64Image(url) {\r\n        const range = this.range;\r\n                \r\n        this.placeholderDelta = this.quill.insertEmbed(\r\n            range.index,\r\n            LoadingImage.blotName,\r\n            `${url}`,\r\n            \"user\"\r\n        );\r\n    }\r\n\r\n    insertToEditor(url) {\r\n        const range = this.range;        \r\n\r\n        const lengthToDelete = this.calculatePlaceholderInsertLength();        \r\n        \r\n        // Delete the placeholder image\r\n        this.quill.deleteText(range.index, lengthToDelete, \"user\");\r\n        // Insert the server saved image\r\n        this.quill.insertEmbed(range.index, \"image\", `${url}`, \"user\");\r\n\r\n        range.index++;\r\n        this.quill.setSelection(range, \"user\");\r\n    }\r\n\r\n    // The length of the insert delta from insertBase64Image can vary depending on what part of the line the insert occurs\r\n    calculatePlaceholderInsertLength() {\r\n        return this.placeholderDelta.ops.reduce((accumulator, deltaOperation) => {            \r\n            if (deltaOperation.hasOwnProperty('insert'))\r\n                accumulator++;\r\n\r\n            return accumulator;\r\n        }, 0);\r\n    }\r\n\r\n    removeBase64Image() {        \r\n        const range = this.range;\r\n        const lengthToDelete = this.calculatePlaceholderInsertLength();\r\n\r\n        this.quill.deleteText(range.index, lengthToDelete, \"user\");\r\n    }\r\n}\r\n\r\nwindow.ImageUploader = ImageUploader;\r\nexport default ImageUploader;"],"names":["InlineBlot","Quill","LoadingImage","create","src","node","super","image","document","createElement","setAttribute","appendChild","deleteAt","index","length","this","cache","value","domNode","custom","dataset","blotName","className","tagName","ImageUploader","constructor","quill","options","range","placeholderDelta","upload","console","warn","toolbar","getModule","addHandler","selectLocalImage","bind","handleDrop","handlePaste","root","addEventListener","focus","getSelection","fileHolder","onchange","fileChanged","body","click","window","requestAnimationFrame","removeChild","evt","dataTransfer","files","stopPropagation","preventDefault","caretRangeFromPoint","selection","clientX","clientY","setBaseAndExtent","startContainer","startOffset","caretPositionFromPoint","offsetNode","offset","file","setTimeout","readAndUploadFile","clipboard","clipboardData","items","IMAGE_MIME_REGEX","i","test","type","getAsFile","isUploadReject","fileReader","FileReader","base64ImageSrc","result","insertBase64Image","readAsDataURL","then","imageUrl","insertToEditor","error","removeBase64Image","url","insertEmbed","concat","lengthToDelete","calculatePlaceholderInsertLength","deleteText","setSelection","ops","reduce","accumulator","deltaOperation","hasOwnProperty"],"sourceRoot":""}